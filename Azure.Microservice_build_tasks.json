{
    "tasks": [
        {
            "environment": {},
            "displayName": "Update build number and component version",
            "alwaysRun": false,
            "continueOnError": false,
            "condition": "succeeded()",
            "enabled": true,
            "timeoutInMinutes": 0,
            "inputs": {
                "targetType": "inline",
                "filePath": "",
                "arguments": "",
                "script": "$component = Get-Content -Path \"component.json\" | ConvertFrom-Json\n\n$component | add-member -Name \"build\" -value ($env:BUILD_BUILDNUMBER) -MemberType NoteProperty -Force\n\n$component | ConvertTo-Json | Set-Content -Path \"component.json\"\n\n[System.Xml.XmlDocument]$xml = Get-Content -Path Source/Service/Service.csproj\n\nif ($xml.Project.PropertyGroup -is [array]) { $xml.Project.PropertyGroup[0].Version = $component.version }\nelse { $xml.Project.PropertyGroup.Version = $component.version }\n\n$xml.Save(\"Source/Service/Service.csproj\")\n",
                "errorActionPreference": "stop",
                "failOnStderr": "false",
                "ignoreLASTEXITCODE": "false",
                "pwsh": "false",
                "workingDirectory": ""
            },
            "task": {
                "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                "versionSpec": "2.*",
                "definitionType": "task"
            }
        },
        {
            "environment": {},
            "displayName": "Create nuget.config",
            "alwaysRun": false,
            "continueOnError": false,
            "condition": "succeeded()",
            "enabled": true,
            "timeoutInMinutes": 0,
            "inputs": {
                "targetType": "inline",
                "filePath": "",
                "arguments": "",
                "script": "$xmlWriter = New-Object System.XMl.XmlTextWriter(\"nuget.config\",$Null)\n   $xmlWriter.Formatting = \"Indented\"\n   $xmlWriter.Indentation = 1\n   $XmlWriter.IndentChar = \"`t\"\n   $xmlWriter.WriteStartDocument()\n           \n   $xmlWriter.WriteStartElement(\"configuration\")\n      \n   $xmlWriter.WriteEndElement()\n   $xmlWriter.WriteEndDocument()\n   $xmlWriter.Flush()\n   $xmlWriter.Close()\n      \n   $xmlDoc = [System.Xml.XmlDocument](Get-Content \"nuget.config\");\n      \n   $packageSources = $xmlDoc.CreateElement(\"packageSources\")\n   $xmlDoc.SelectSingleNode(\"//configuration\").AppendChild($packageSources)\n   $packageSource=$packageSources.AppendChild($xmlDoc.CreateElement(\"add\"))\n   $packageSource.SetAttribute(\"key\", $env:NUGET_SOURCE_NAME)\n   $packageSource.SetAttribute(\"value\", $env:NUGET_SOURCE_URL)\n      \n   $packageSource=$packageSources.AppendChild($xmlDoc.CreateElement(\"add\"))\n   $packageSource.SetAttribute(\"key\", \"nuget.org\")\n   $packageSource.SetAttribute(\"value\", \"https://api.nuget.org/v3/index.json\")\n      \n   $packageSourceCredentials = $xmlDoc.CreateElement(\"packageSourceCredentials\")\n   $xmlDoc.SelectSingleNode(\"//configuration\").AppendChild($packageSourceCredentials)\n   $packageSourceCredential=$packageSourceCredentials.AppendChild($xmlDoc.CreateElement($env:NUGET_SOURCE_NAME))\n   $username=$packageSourceCredential.AppendChild($xmlDoc.CreateElement(\"add\"))\n   $username.SetAttribute(\"key\", \"Username\")\n   $username.SetAttribute(\"value\", $env:NUGET_USERNAME)\n   $password=$packageSourceCredential.AppendChild($xmlDoc.CreateElement(\"add\"))\n   $password.SetAttribute(\"key\", \"ClearTextPassword\")\n   $password.SetAttribute(\"value\", $env:NUGET_PASSWORD)\n      \n   $encoding=\"utf-8\"\n   $xmlDoc.xml = $($xmlDoc.CreateXmlDeclaration(\"1.0\",$encoding,\"\")).Value\n      \n   $xmlDoc.Save(\"nuget.config\")",
                "errorActionPreference": "stop",
                "failOnStderr": "false",
                "ignoreLASTEXITCODE": "false",
                "pwsh": "false",
                "workingDirectory": ""
            },
            "task": {
                "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                "versionSpec": "2.*",
                "definitionType": "task"
            }
        },
        {
            "environment": {},
            "displayName": "Build",
            "alwaysRun": false,
            "continueOnError": false,
            "condition": "succeeded()",
            "enabled": true,
            "timeoutInMinutes": 0,
            "inputs": {
                "targetType": "filePath",
                "filePath": "build.ps1",
                "arguments": "",
                "script": "# Write your powershell commands here.\n\nWrite-Host \"Hello World\"\n\n# Use the environment variables input below to pass secret variables to this script.",
                "errorActionPreference": "stop",
                "failOnStderr": "false",
                "ignoreLASTEXITCODE": "false",
                "pwsh": "false",
                "workingDirectory": ""
            },
            "task": {
                "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                "versionSpec": "2.*",
                "definitionType": "task"
            }
        },
        {
            "environment": {},
            "displayName": "Test",
            "alwaysRun": false,
            "continueOnError": false,
            "condition": "succeeded()",
            "enabled": true,
            "timeoutInMinutes": 0,
            "inputs": {
                "targetType": "filePath",
                "filePath": "test.ps1",
                "arguments": "",
                "script": "# Write your powershell commands here.\n\nWrite-Host \"Hello World\"\n\n# Use the environment variables input below to pass secret variables to this script.",
                "errorActionPreference": "stop",
                "failOnStderr": "false",
                "ignoreLASTEXITCODE": "false",
                "pwsh": "false",
                "workingDirectory": ""
            },
            "task": {
                "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                "versionSpec": "2.*",
                "definitionType": "task"
            }
        },
        {
            "environment": {},
            "displayName": "Package",
            "alwaysRun": false,
            "continueOnError": false,
            "condition": "succeeded()",
            "enabled": true,
            "timeoutInMinutes": 0,
            "inputs": {
                "targetType": "filePath",
                "filePath": "package.ps1",
                "arguments": "",
                "script": "# Write your powershell commands here.\n\nWrite-Host \"Hello World\"\n\n# Use the environment variables input below to pass secret variables to this script.",
                "errorActionPreference": "stop",
                "failOnStderr": "false",
                "ignoreLASTEXITCODE": "false",
                "pwsh": "false",
                "workingDirectory": ""
            },
            "task": {
                "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                "versionSpec": "2.*",
                "definitionType": "task"
            }
        },
        {
            "environment": {},
            "displayName": "Publish",
            "alwaysRun": false,
            "continueOnError": false,
            "condition": "succeeded()",
            "enabled": true,
            "timeoutInMinutes": 0,
            "inputs": {
                "targetType": "filePath",
                "filePath": "publish.ps1",
                "arguments": "",
                "script": "# Write your powershell commands here.\n\nWrite-Host \"Hello World\"\n\n# Use the environment variables input below to pass secret variables to this script.",
                "errorActionPreference": "stop",
                "failOnStderr": "false",
                "ignoreLASTEXITCODE": "false",
                "pwsh": "false",
                "workingDirectory": ""
            },
            "task": {
                "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                "versionSpec": "2.*",
                "definitionType": "task"
            }
        },
        {
            "environment": {},
            "displayName": "Push Nuget packages",
            "alwaysRun": false,
            "continueOnError": false,
            "condition": "succeeded()",
            "enabled": true,
            "timeoutInMinutes": 0,
            "inputs": {
                "command": "push",
                "publishWebProjects": "true",
                "projects": "",
                "custom": "",
                "arguments": "",
                "publishTestResults": "true",
                "testRunTitle": "",
                "zipAfterPublish": "true",
                "modifyOutputPath": "true",
                "selectOrConfig": "select",
                "feedRestore": "",
                "includeNuGetOrg": "true",
                "nugetConfigPath": "",
                "externalEndpoints": "",
                "noCache": "false",
                "packagesDirectory": "",
                "verbosityRestore": "Detailed",
                "searchPatternPush": "**/*.nupkg",
                "nuGetFeedType": "internal",
                "feedPublish": "f823914d-6052-49d0-af84-58e6b9e4914c",
                "publishPackageMetadata": "true",
                "externalEndpoint": "",
                "searchPatternPack": "**/*.csproj",
                "configurationToPack": "$(BuildConfiguration)",
                "outputDir": "$(Build.ArtifactStagingDirectory)",
                "nobuild": "false",
                "includesymbols": "false",
                "includesource": "false",
                "versioningScheme": "off",
                "versionEnvVar": "",
                "requestedMajorVersion": "1",
                "requestedMinorVersion": "0",
                "requestedPatchVersion": "0",
                "buildProperties": "",
                "verbosityPack": "Detailed",
                "workingDirectory": ""
            },
            "task": {
                "id": "5541a522-603c-47ad-91fc-a4b1d163081b",
                "versionSpec": "2.*",
                "definitionType": "task"
            }
        },
        {
            "environment": {},
            "displayName": "Set tag environment",
            "alwaysRun": false,
            "continueOnError": false,
            "condition": "succeeded()",
            "enabled": true,
            "timeoutInMinutes": 0,
            "inputs": {
                "targetType": "inline",
                "filePath": "",
                "arguments": "",
                "script": "$component = Get-Content -Path \"component.json\" | ConvertFrom-Json\n$version = $component.version\n$build_number = $component.build_number\n\n$tag=($version) + '-' + ($build_number)\n\nWrite-Host \"##vso[task.setvariable variable=tag;isOutput=true;]\"($tag)\nWrite-Host \"##vso[build.updatebuildnumber]\"($tag)",
                "errorActionPreference": "stop",
                "failOnStderr": "false",
                "ignoreLASTEXITCODE": "false",
                "pwsh": "false",
                "workingDirectory": ""
            },
            "task": {
                "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                "versionSpec": "2.*",
                "definitionType": "task"
            }
        },
        {
            "environment": {},
            "displayName": "Copy component.json to drop",
            "alwaysRun": false,
            "continueOnError": false,
            "condition": "succeeded()",
            "enabled": true,
            "timeoutInMinutes": 0,
            "inputs": {
                "SourceFolder": "",
                "Contents": "component.json",
                "TargetFolder": "drop",
                "CleanTargetFolder": "false",
                "OverWrite": "false",
                "flattenFolders": "false",
                "preserveTimestamp": "false"
            },
            "task": {
                "id": "5bfb729a-a7c8-4a78-a7c3-8d717bb7c13c",
                "versionSpec": "2.*",
                "definitionType": "task"
            }
        },
        {
            "environment": {},
            "displayName": "Publish Artifact from drop",
            "alwaysRun": false,
            "continueOnError": false,
            "condition": "succeeded()",
            "enabled": true,
            "timeoutInMinutes": 0,
            "inputs": {
                "PathtoPublish": "drop",
                "ArtifactName": "drop",
                "ArtifactType": "Container",
                "TargetPath": "",
                "Parallel": "false",
                "ParallelCount": "8"
            },
            "task": {
                "id": "2ff763a7-ce83-4e1f-bc89-0ae63477cebe",
                "versionSpec": "1.*",
                "definitionType": "task"
            }
        },
        {
            "environment": {},
            "displayName": "Clean",
            "alwaysRun": false,
            "continueOnError": false,
            "condition": "always()",
            "enabled": true,
            "timeoutInMinutes": 0,
            "inputs": {
                "targetType": "filePath",
                "filePath": "clean.ps1",
                "arguments": "",
                "script": "# Write your powershell commands here.\n\nWrite-Host \"Hello World\"\n\n# Use the environment variables input below to pass secret variables to this script.",
                "errorActionPreference": "stop",
                "failOnStderr": "false",
                "ignoreLASTEXITCODE": "false",
                "pwsh": "false",
                "workingDirectory": ""
            },
            "task": {
                "id": "e213ff0f-5d5c-4791-802d-52ea3e7be1f1",
                "versionSpec": "2.*",
                "definitionType": "task"
            }
        }
    ],
    "runsOn": [
        "Agent"
    ],
    "revision": 8,
    "comment": "",
    "id": "37a9a713-4f78-43df-ac0f-85b84f3ee86a",
    "name": "Microservice build tasks",
    "version": {
        "major": 1,
        "minor": 0,
        "patch": 0,
        "isTest": false
    },
    "iconUrl": "https://cdn.vsassets.io/v/20180323T180524/_content/icon-meta-task.png",
    "friendlyName": "Microservice build tasks",
    "description": "",
    "category": "Build",
    "definitionType": "metaTask",
    "demands": [],
    "groups": [],
    "inputs": [],
    "satisfies": [],
    "sourceDefinitions": [],
    "dataSourceBindings": [],
    "instanceNameFormat": "Task group: Microservice build tasks ",
    "preJobExecution": {},
    "execution": {},
    "postJobExecution": {}
}